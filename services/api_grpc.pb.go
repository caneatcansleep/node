// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services/api.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	// Sends a greeting
	UpdateNodeMetric(ctx context.Context, in *UpdateNodeMetricRequest, opts ...grpc.CallOption) (*UpdateNodeMetricReply, error)
	UpdateLinkMetric(ctx context.Context, in *UpdateLinkMetricRequest, opts ...grpc.CallOption) (*UpdateLinkMetricReply, error)
	SelectRelayPath(ctx context.Context, in *SelectRelayPathRequest, opts ...grpc.CallOption) (*SelectRelayPathReply, error)
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeReply, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) UpdateNodeMetric(ctx context.Context, in *UpdateNodeMetricRequest, opts ...grpc.CallOption) (*UpdateNodeMetricReply, error) {
	out := new(UpdateNodeMetricReply)
	err := c.cc.Invoke(ctx, "/server.Controller/UpdateNodeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UpdateLinkMetric(ctx context.Context, in *UpdateLinkMetricRequest, opts ...grpc.CallOption) (*UpdateLinkMetricReply, error) {
	out := new(UpdateLinkMetricReply)
	err := c.cc.Invoke(ctx, "/server.Controller/UpdateLinkMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SelectRelayPath(ctx context.Context, in *SelectRelayPathRequest, opts ...grpc.CallOption) (*SelectRelayPathReply, error) {
	out := new(SelectRelayPathReply)
	err := c.cc.Invoke(ctx, "/server.Controller/SelectRelayPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeReply, error) {
	out := new(RegisterNodeReply)
	err := c.cc.Invoke(ctx, "/server.Controller/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	// Sends a greeting
	UpdateNodeMetric(context.Context, *UpdateNodeMetricRequest) (*UpdateNodeMetricReply, error)
	UpdateLinkMetric(context.Context, *UpdateLinkMetricRequest) (*UpdateLinkMetricReply, error)
	SelectRelayPath(context.Context, *SelectRelayPathRequest) (*SelectRelayPathReply, error)
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeReply, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) UpdateNodeMetric(context.Context, *UpdateNodeMetricRequest) (*UpdateNodeMetricReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeMetric not implemented")
}
func (UnimplementedControllerServer) UpdateLinkMetric(context.Context, *UpdateLinkMetricRequest) (*UpdateLinkMetricReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkMetric not implemented")
}
func (UnimplementedControllerServer) SelectRelayPath(context.Context, *SelectRelayPathRequest) (*SelectRelayPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRelayPath not implemented")
}
func (UnimplementedControllerServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_UpdateNodeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UpdateNodeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Controller/UpdateNodeMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UpdateNodeMetric(ctx, req.(*UpdateNodeMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UpdateLinkMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UpdateLinkMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Controller/UpdateLinkMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UpdateLinkMetric(ctx, req.(*UpdateLinkMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SelectRelayPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRelayPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SelectRelayPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Controller/SelectRelayPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SelectRelayPath(ctx, req.(*SelectRelayPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Controller/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeMetric",
			Handler:    _Controller_UpdateNodeMetric_Handler,
		},
		{
			MethodName: "UpdateLinkMetric",
			Handler:    _Controller_UpdateLinkMetric_Handler,
		},
		{
			MethodName: "SelectRelayPath",
			Handler:    _Controller_SelectRelayPath_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Controller_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/api.proto",
}
